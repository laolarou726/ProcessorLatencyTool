# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: ["master"]

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
        if: github.event_name != 'push'

      - name: Set tag name
        id: tag
        run: |
          tag=v$(date +%Y%m%d.%H%M%S)
          echo "tag=${{ github.ref_name }}.$tag" >> $GITHUB_OUTPUT
      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: |
          tag="${{ steps.tag.outputs.tag }}"
          body="laolarou726/ProcessorLatencyTool@${{ needs.prepare.outputs.commit }}"
          gh release create --draft "$tag" --title "$tag" --notes "$body"

  build:
    needs: [release]
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        target: [x64, arm64]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: dotnet publish -c Release -r win-${{ env.Target }} --no-restore
        working-directory: ./ProcessorLatencyTool
        env:
          Target: ${{ matrix.target }}

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: dotnet publish -c Release -r osx-${{ env.Target }} --no-restore
        working-directory: ./ProcessorLatencyTool
        env:
          Target: ${{ matrix.target }}

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: dotnet publish -c Release -r linux-${{ env.Target }} --no-restore
        working-directory: ./ProcessorLatencyTool
        env:
          Target: ${{ matrix.target }}

      - name: Compress Build Files (Windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path publish -DestinationPath ${{ env.OS }}_${{ env.Target }}.zip
        working-directory: ./ProcessorLatencyTool/bin/Release/net9.0
        env:
          OS: ${{ matrix.os }}
          Target: ${{ matrix.target }}

      - name: Compress Build Files (Unix)
        if: (matrix.os == 'macos-latest') || (matrix.os == 'ubuntu-latest')
        run: zip -9 -r ${{ env.OS }}.zip publish
        working-directory: ./ProcessorLatencyTool/bin/Release/net9.0
        env:
          OS: ${{ matrix.os }}

      - name: Upload Built Binaries
        env:
          OS: ${{ matrix.os }}
          GH_TOKEN: ${{ secrets.PUBLISHTOKEN }}
          GH_REPO: ${{ github.repository }}
        run: gh release upload "${{ needs.release.outputs.tag }}" "${{ env.OS }}.zip"
        working-directory: ./ProcessorLatencyTool/bin/Release/net9.0

  publish:
    name: Publish Release
    needs: [release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        env:
          GH_TOKEN: ${{ secrets.PUBLISHTOKEN }}
          GH_REPO: ${{ github.repository }}
        run: gh release edit "${{ needs.release.outputs.tag }}" --draft=false
      - uses: eregon/keep-last-n-releases@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISHTOKEN }}
        with:
          n: 3
          remove_tags_without_release: true
